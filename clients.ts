//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class CubeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "https://localhost:7138";
    }

    getDefaultCube(length: number | undefined): Promise<Square[]> {
        let url_ = this.baseUrl + "/api/Cube/generate?";
        if (length === null)
            throw new Error("The parameter 'length' cannot be null.");
        else if (length !== undefined)
            url_ += "length=" + encodeURIComponent("" + length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDefaultCube(_response);
        });
    }

    protected processGetDefaultCube(response: Response): Promise<Square[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Square.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Square[]>(null as any);
    }

    rotateCube(request: RotateCubeRequest): Promise<Square[]> {
        let url_ = this.baseUrl + "/api/Cube/rotate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRotateCube(_response);
        });
    }

    protected processRotateCube(response: Response): Promise<Square[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Square.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Square[]>(null as any);
    }
}

export class Square implements ISquare {
    direction?: FaceDirection;
    cells?: Cell[];

    constructor(data?: ISquare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.direction = _data["direction"];
            if (Array.isArray(_data["cells"])) {
                this.cells = [] as any;
                for (let item of _data["cells"])
                    this.cells!.push(Cell.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Square {
        data = typeof data === 'object' ? data : {};
        let result = new Square();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["direction"] = this.direction;
        if (Array.isArray(this.cells)) {
            data["cells"] = [];
            for (let item of this.cells)
                data["cells"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISquare {
    direction?: FaceDirection;
    cells?: Cell[];
}

export enum FaceDirection {
    Front = 0,
    Right = 1,
    Up = 2,
    Bottom = 3,
    Left = 4,
    Down = 5,
}

export class Cell implements ICell {
    row?: number;
    column?: number;
    color?: Color;
    firstRotationNumber?: number;
    secondRotationNumber?: number;
    thirdRotationNumber?: number;

    constructor(data?: ICell) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.column = _data["column"];
            this.color = _data["color"];
            this.firstRotationNumber = _data["firstRotationNumber"];
            this.secondRotationNumber = _data["secondRotationNumber"];
            this.thirdRotationNumber = _data["thirdRotationNumber"];
        }
    }

    static fromJS(data: any): Cell {
        data = typeof data === 'object' ? data : {};
        let result = new Cell();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["column"] = this.column;
        data["color"] = this.color;
        data["firstRotationNumber"] = this.firstRotationNumber;
        data["secondRotationNumber"] = this.secondRotationNumber;
        data["thirdRotationNumber"] = this.thirdRotationNumber;
        return data;
    }
}

export interface ICell {
    row?: number;
    column?: number;
    color?: Color;
    firstRotationNumber?: number;
    secondRotationNumber?: number;
    thirdRotationNumber?: number;
}

export enum Color {
    Green = 0,
    Red = 1,
    White = 2,
    Blue = 3,
    Orange = 4,
    Yellow = 5,
}

export class RotateCubeRequest implements IRotateCubeRequest {
    cubeData?: Square[];
    length?: number;
    cell?: Cell;
    startSwipeDirection?: FaceDirection;
    endSwipeDirection?: FaceDirection;

    constructor(data?: IRotateCubeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cubeData"])) {
                this.cubeData = [] as any;
                for (let item of _data["cubeData"])
                    this.cubeData!.push(Square.fromJS(item));
            }
            this.length = _data["length"];
            this.cell = _data["cell"] ? Cell.fromJS(_data["cell"]) : <any>undefined;
            this.startSwipeDirection = _data["startSwipeDirection"];
            this.endSwipeDirection = _data["endSwipeDirection"];
        }
    }

    static fromJS(data: any): RotateCubeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RotateCubeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cubeData)) {
            data["cubeData"] = [];
            for (let item of this.cubeData)
                data["cubeData"].push(item.toJSON());
        }
        data["length"] = this.length;
        data["cell"] = this.cell ? this.cell.toJSON() : <any>undefined;
        data["startSwipeDirection"] = this.startSwipeDirection;
        data["endSwipeDirection"] = this.endSwipeDirection;
        return data;
    }
}

export interface IRotateCubeRequest {
    cubeData?: Square[];
    length?: number;
    cell?: Cell;
    startSwipeDirection?: FaceDirection;
    endSwipeDirection?: FaceDirection;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}